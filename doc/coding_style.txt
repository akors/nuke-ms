A) Naming Scheme

All characters are allowed in Variable names.

1) Classes, Interfaces, Namespaces and Enums begin with an uppercase Letter or
an underscore, all other characters are lowercase letters or underscores. If the
names consist of several words, each word starts with an uppercase Letter, all
other characters are lowercase letters or underscores.

    Example: ControlCommand


2) Global variables, local variables, member variables, constants end anonymous
enum members that are used instead of constants consist of lowercase letters.
If the names consist of several words, the words are separated by an
underscore. Uppercase letters are allowed for abbreviations.

    Example: app_control


3) Free- and member functions shall follow the same naming scheme as 1), with
the only difference that the function name starts with a lowercase letter.

4) Template Parameter names shall follow the same naming scheme as 1).


5) Preprocessor macros and members of non- anonymous enums are in uppercase
letters. If the names consist of several words, the words are separated by an
underscore.


B) Whitespaces

1) Line endings consist of only the line- feed character ('\n').
2) All indentations where a tab character would be used consist of 4 space
characters. To avoid confusion, no tab character should be used at all. (An
exception to this rule are Makefiles)

3) goto labels shall be indented to the indentation level of the current scope.
    Example:
    int main()
    {
        goto main_sub3;

    main_sub3:
    }

4) Access modifiers (public, protected, private) are indented to the indentation
level of their enclosing class.

    example:

    class BasicMessageLayer
    {
    public:
    	bytes_sequence serialize();
    };

5) if, else, else if, for, while, try and catch execution blocks begin on the
next line after their respective statement. All statements and blocks inside
are indented one additional level.
If the execution block is only one statement, the braces can be ommited.

    Example:

    if ( something )
    {
        doSomething();
        break;
    }
    else
        doSomethingElse();




6) Space characters should be inserted everywhere where they help to group or
separate expressions. They can be omitted however, to squeeze an expression into
one line.


7) Line Length
The maximum line length is 80 characters, including any leading and trailing
whitespace.
This maximum length should be followed as far as possible. However, in some
cases it is advisable to ignore this limitation and write lines that are longer
than 80 characters.


8) Source file layout
Every source file begins with a C++ line comment ("//"), a space, the name of
the source file, a newline, another newline and the license block.

    Example:

     ----------------------------------------------------------------------------
    // main.hpp

    /*
     *   nuke-ms - Nuclear Messaging System
     *   Copyright (C) 2008  Alexander Korsunsky
     *
     *   This program is free software: you can redistribute it and/or modify

     ...
    ----------------------------------------------------------------------------

This block should be followed by a Javadoc- like comment intended for
documentation of the file by doxygen.
Then all kinds of doxygen declarations and documentations can follow.

The source code itself contains the following optional items, in this order:

    Include Guards

    std:: includes
    library includes
    project includes

    preprocessor macros
    typedefs

    type declarations

    function declarations

    variable declarations
    variable definitions

    function definitions

Of course, if required by the source code, this order can be broken.
